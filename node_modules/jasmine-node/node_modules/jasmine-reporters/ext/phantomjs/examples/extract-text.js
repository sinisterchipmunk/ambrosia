(function() {
  /*
  Extract text from a webpage using CSS selectors to include or exclude elements
  By @westonruter
  */
  var arg, el, excludedElements, includedElements, matches, name, presetSelectors, state, text, trim, value, _i, _j, _k, _len, _len2, _len3, _ref;
  var __indexOf = Array.prototype.indexOf || function(item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (this[i] === item) return i;
    }
    return -1;
  };
  trim = function(s) {
    return s.replace(/\s+/g, ' ').replace(/^\s+/, '').replace(/\s+$/, '');
  };
  presetSelectors = {
    wikipedia: {
      excludeSelectors: "table.metadata, #bodyContent sup, #toc, .editsection, .rellink.relarticle.mainarticle, .rellink.boilerplate.seealso, table.vertical-navbox, .dablink, table.navbox, div.reflist, #catlinks, #mw-articlefeedback, table.infobox",
      includeSelectors: "#content p, #content h1, #content h2, #content h3, #content h4, #content h5, #content h6, #content li"
    },
    _default: {
      includeSelectors: 'h1, h2, h3, h4, h5, h6, p, li'
    }
  };
  if (!phantom.state) {
    if (phantom.args.length < 1) {
      console.log('Usage: extract-text.js [options] URL');
      console.log('Try piping the output into the `say` command!');
      console.log('Options:');
      console.log('--include SELECTORS');
      console.log('--exclude SELECTORS');
      console.log('--preset NAME (only "wikipedia" right now; default values for include/exclude)');
      phantom.exit();
    } else {
      state = {
        url: null,
        includeSelectors: null,
        excludeSelectors: null
      };
      _ref = phantom.args;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        arg = _ref[_i];
        matches = arg.match(/^--(\w+)(?:=(.+))?/);
        if (matches) {
          name = matches[1];
          if (matches[2]) {
            value = matches[2].replace(/^["']/).replace(/["']$/);
          } else {
            value = args.shift();
          }
          switch (name) {
            case 'include':
              state.includeSelectors = value;
              break;
            case 'exclude':
              state.excludeSelectors = value;
              break;
            case 'preset':
              if (__indexOf.call(presetSelectors, value) < 0) {
                console.log("Error: Unrecognized preset selector set named '" + value + "'.");
                phantom.exit(1);
              } else {
                state.includeSelectors = presetSelectors[value].includeSelectors;
                state.excludeSelectors = presetSelectors[value].excludeSelectors;
              }
          }
        } else {
          state.url = arg;
        }
      }
      if (!state.includeSelectors) {
        state.includeSelectors = presetSelectors._default.includeSelectors;
      }
      phantom.state = JSON.stringify(state);
      phantom.open(state.url);
    }
  } else {
    state = JSON.parse(phantom.state);
    if (state.excludeSelectors) {
      excludedElements = document.querySelectorAll(state.excludeSelectors);
      for (_j = 0, _len2 = excludedElements.length; _j < _len2; _j++) {
        el = excludedElements[_j];
        el.parentNode.removeChild(el);
      }
    }
    includedElements = document.querySelectorAll(state.includeSelectors);
    for (_k = 0, _len3 = includedElements.length; _k < _len3; _k++) {
      el = includedElements[_k];
      text = trim(el.textContent);
      if (text) {
        console.log(text + "\n");
      }
    }
    phantom.exit();
  }
}).call(this);
