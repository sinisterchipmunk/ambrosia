(function() {
  /*
   Wait until the test condition is true or a timeout occurs. Useful for waiting
   on a server response or for a ui change (fadeIn, etc.) to occur.
  
   @param testFx javascript condition that evaluates to a boolean,
   it can be passed in as a string (e.g.: "1 == 1" or "$('#bar').is(':visible')" or
   as a callback function.
   @param message a message describing e.g. the ui change
   @param timeOutMillis the max amount of time to wait. If not specified, 3 sec is used.
  */
  var waitFor;
  waitFor = function(testFx, message, maxtimeOutMillis) {
    var condition, start;
    if (maxtimeOutMillis == null) {
      maxtimeOutMillis = 3000;
    }
    start = new Date().getTime();
    condition = false;
    while ((new Date().getTime() - start) < maxtimeOutMillis) {
      phantom.sleep(250);
      if (typeof testFx === "string") {
        condition = eval(testFx);
      } else {
        condition = testFx();
      }
      if (condition) {
        break;
      }
    }
    if (!condition) {
      console.log("Timeout: " + message);
      return phantom.exit(1);
    } else {
      console.log(message);
      return console.log("+++ waitUntil finished in " + (new Date().getTime() - start) + " millis.");
    }
  };
  if (!phantom.state) {
    phantom.state = "loaded";
    phantom.open("http://twitter.com/#!/senchainc");
  } else {
    $(".signin-link").click();
    waitFor((function() {
      return $("#signin-dropdown").is(":visible");
    }), "The sign-in dialog should be visible");
    phantom.exit();
  }
}).call(this);
