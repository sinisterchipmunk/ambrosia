var path = require('path');
var fs = require('fs');

if (fs.addMockFile) {
  
    fs.addMockFile(path.join("spec/fixtures/fixtures", "scripts/functions"), "# replace the TML (screens) with traditional programming (methods)\n\ninit(a, b, c):\n  one = a\n  two = b\n  return second c\n\nsecond(a):\n  one = a\n  return one + 1\n\nresult = init 1, 2, 3 #=> 4\n");
  
    fs.addMockFile(path.join("spec/fixtures/fixtures", "scripts/functions.xml"), "<tml>\n  <vardcl name=\"call.stack_shift\" type=\"string\" />\n  <vardcl name=\"call.stack\" type=\"string\" />\n  <vardcl name=\"one\" type=\"integer\" />\n  <vardcl name=\"two\" type=\"integer\" />\n  <vardcl name=\"three\" type=\"integer\" />\n  <vardcl name=\"init.a\" type=\"integer\" />\n  <vardcl name=\"init.b\" type=\"integer\" />\n  <vardcl name=\"init.c\" type=\"integer\" />\n  <vardcl name=\"init.return\" type=\"integer\" />\n  <vardcl name=\"second.c\" type=\"integer\" />\n  <vardcl name=\"second.return\" type=\"integer\" />\n  \n  <screen id=\"__main__\">\n    <next uri=\"#main\" />\n  </screen>\n\n  <!-- called when returning from a function, figures out where to return to -->\n  <screen id=\"__return__\">\n    <next uri=\"#__shift_char__\">\n      <!-- if no items in stack, return to main; else, shift 1 character -->\n      <variant uri=\"#__main__\" lo=\"tmlvar:call.stack_shift\" op=\"equal\" ro=\"\" />\n    </next>\n    <setvar name=\"call.stack_shift\" lo=\"tmlvar:call.return_stack\" op=\"item\" ro=\"0\" />\n  </screen>\n  <screen id=\"__shift_char__\">\n    <!-- shift 1 character in a loop until the first character is ; -->\n    <next uri=\"#__shift_char__\">\n      <variant uri=\"__shift_last__\" lo=\"tmlvar:call.return_stack\" op=\"equal\" ro=\";\" format=\"c\" />\n    </next>\n    <setvar name=\"call.return_stack\" lo=\"tmlvar:call.return_stack\" op=\"minus\" ro=\"-1\" />\n  </screen>\n  <screen id=\"__shift_last__\">\n    <!-- remove the ; from the beginning of the string, then go to the return destination -->\n    <next uri=\"tmlvar:call.stack_shift\">\n    <setvar name=\"call.return_stack\" lo=\"tmlvar:call.return_stack\" op=\"minus\" ro=\"-1\" />\n  </screen>\n  \n  <screen id=\"main\">\n    <next uri=\"#init\" />\n    <setvar name=\"call.stack\" ro=\"tmlvar:call.stack\" op=\"plus\" lo=\"#___main___init\" />\n    <setvar name=\"call.stack\" ro=\"tmlvar:call.stack\" op=\"plus\" lo=\";\" />\n    <setvar name=\"init.a\" lo=\"1\" />\n    <setvar name=\"init.b\" lo=\"2\" />\n    <setvar name=\"init.c\" lo=\"3\" />\n  </screen>\n  \n  <screen id=\"init\">\n    <next uri=\"#second\" />\n    <setvar name=\"call.stack\" ro=\"tmlvar:call.stack\" op=\"plus\" lo=\"#_init_second\" />\n    <setvar name=\"call.stack\" ro=\"tmlvar:call.stack\" op=\"plus\" lo=\";\" />\n    <setvar name=\"one\" lo=\"tmlvar:init.a\" />\n    <setvar name=\"two\" lo=\"tmlvar:init.b\" />\n  </screen>\n  \n  <screen id=\"second\">\n    <next uri=\"#__return__\" />\n    <setvar name=\"three\" lo=\"tmlvar:second.c\" />\n    <setvar name=\"second.return\" lo=\"tmlvar:init.c\" op=\"plus\" ro=\"1\" />\n  </screen>\n  \n  <screen id=\"_init_second\">\n    <next uri=\"#__return__\" />\n    <setvar name=\"init.return\" lo=\"second.return\" />\n  </screen>\n  \n  <screen id=\"___main___init\">\n    <next uri=\"#__return__\" />\n    <setvar name=\"result\" lo=\"tmlvar:init.return\" />\n  </screen>\n</tml>");
  
    fs.addMockFile(path.join("spec/fixtures/fixtures", "scripts/standard"), "###\nSingle line comments start with one pound ('#'). Multiline comments are denoted with 3 pounds.\n\nThis is an indent-sensitive syntax. Indents are used for blocks, while outdents close the block.\n\nScreens are defined at the top level (no indent) with the form [screen name] [colon]. They contain\nblocks of code to be evaluated in that screen.\n\nAnywhere else, _references_ to screen names are denoted with [colon] [screen name]. These are used\nas arguments to functions, such as goto(:screen_name). The screen name can be referenced as if it\nwere itself a function, causing the terminal to switch immediately to the specified screen if no\nother conditions have tested true.\n\nVariables are defined dynamically based upon their content. Variable types can't be changed, but they\ncan be cast into other types. If the type cannot be inferred from context, its type will default to\n'string'. Variable names can contain periods and underscores.\n\nKeypresses can be checked as part of an if-condition or a switch.\n###\n\n\ninit:\n  txn.unique_id = oebr.unique_id\n  txn.ref_num = \"\"\n  title = \"Beryl\"\n  screen_after_swipe = :enter_amount\n  screen_after_confirm = :submit_data\n  screen_after_amount = :confirm_amount\n  payment.amount = 0\n  payment.cashback = 0\n  card.ccv = card.avs.zip = card.avs.address = txn.invoice_number = \"\"\n  oebr.time_zone = -5\n  \n  idle\n\nidle:\n  main_menu if keypress 'menu'\n  card_swipe :swipe_from_idle, :card_read_error, ->\n    print 'Beryl v3.0',        align: 'center', valign: 'middle', size: 'large'\n    print 'Please Swipe Card', align: 'center', valign: 'bottom'\n\ncard_swipe: next, error, prompt_callback\n  begin\n    if card_swiped('magnetic', prompt_callback)\n      next()\n  rescue\n    error()\n\nmain_menu:\n  switch keypress\n    when 1: credit_menu\n    when 2: debit_menu\n    when 3: batch_inquiry\n    when 4: batch_settlement\n    when 5: admin_menu\n    when 6: messaging\n    when 7: print_coupon\n    when 'f1': help\n  \n  # render the 'main_menu' view\n  print \"1. \#{link_to :credit_menu, }\"\n");
  
    fs.addMockFile(path.join("spec/fixtures/fixtures", "views/basic-embedded-code.xml"), "<% if a == 1 then a = 2 %>");
  
    fs.addMockFile(path.join("spec/fixtures/fixtures", "views/basic-embedded-operation.xml"), "the result is <%= a + 2 %>");
  
    fs.addMockFile(path.join("spec/fixtures/fixtures", "views/basic-embedded-variable.xml"), "<%= \n  a \n%>\n");
  
    fs.addMockFile(path.join("spec/fixtures/fixtures", "views/basic-layout.xml"), "<h1><%= title %></h1>\n\n<p>\n  <%= yield() %>\n</p>\n");
  
    fs.addMockFile(path.join("spec/fixtures/fixtures", "views/link_to_one.xml"), "<%= link_to 'one', :one %>\n");
  
    fs.addMockFile(path.join("spec/fixtures/fixtures", "views/without-embedded.xml"), "one\n<h1 class=\"title\">title caption</h1>\nthis is test content\n");
  
}
